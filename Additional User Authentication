//User Authentication

User.js

Create a new Mongoose schema for the User model.
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  email: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
  createdAt: {
    type: Date,
    default: new Date(),
  },
});

userSchema.pre('save', async function () {
  this.password = await bcrypt.hash(this.password, 12);
});

module.exports = mongoose.model('User', userSchema);
auth.js (utils)

Create utility functions for handling JWT.
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const generateToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: '30d',
  });
};

const isMatch = (password, hash) => {
  return bcrypt.compare(password, hash);
};

module.exports = { generateToken, isMatch };
auth.js (routes)

Create API routes for handling user authentication.
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const { generateToken, isMatch } = require('../utils/auth');

router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;

  const user = new User({ username, email, password });

  await user.save();

  res.json({ message: 'User registered successfully' });
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (!user) {
    return res.status(400).json({ message: 'Invalid email or password' });
  }

  const isPasswordValid = await isMatch(password, user.password);

  if (!isPasswordValid) {
    return res.status(400).json({ message: 'Invalid email or password' });
  }

  const token = generateToken(user._id);

  res.cookie('token', token, { httpOnly: true });

  res.json({ message: 'Logged in successfully' });
});

router.get('/logout', (req, res) => {
  res.clearCookie('token');

  res.json({ message: 'Logged out successfully' });
});

module.exports = router;
